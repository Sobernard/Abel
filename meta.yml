fullname: Abel - Ruffini Theorem as a Mathematical Component
shortname: abel
organization: math-comp
opam_name: coq-mathcomp-abel
community: false
action: true
coqdoc: false

synopsis: >-
  Abel Ruffini's theorem
description: |-
  This repository contains a proof of Abel Ruffini Theorem in the
  Coq proof-assistant and using the Mathematical Components library.

authors:
- name : Sophie Bernard
  initial: true
- name: Cyril Cohen
  initial: true
- name: Assia Mahboubi
  initial: true
- name: Pierre-Yves Strub
  initial: true

opam-file-maintainer: Cyril Cohen <cyril.cohen@inria.fr>

opam-file-version: dev

# license:
#   fullname: CeCILL-C
#   identifier: CECILL-C
#   file: LICENSE

supported_coq_versions:
  text: Coq 8.10 to 8.12
  opam: '{ (>= "8.10" & < "8.13~") }'

tested_coq_opam_versions:
- version: '1.11.0-coq-8.10'
  repo: 'mathcomp/mathcomp'
- version: '1.11.0-coq-8.11'
  repo: 'mathcomp/mathcomp'
- version: '1.11.0-coq-8.12'
  repo: 'mathcomp/mathcomp'

dependencies:
- opam:
    name: coq-mathcomp-ssreflect
    version: '{ (>= "1.11.0" & < "1.12~") }'
  description: |-
    [MathComp ssreflect 1.11](https://math-comp.github.io)
- opam:
    name: coq-mathcomp-fingroup
    version: '{ (>= "1.11.0" & < "1.12~") }'
  description: |-
    [MathComp fingroup 1.11](https://math-comp.github.io)
- opam:
    name: coq-mathcomp-algebra
    version: '{ (>= "1.11.0" & < "1.12~") }'
  description: |-
    [MathComp algebra 1.11](https://math-comp.github.io)
- opam:
    name: coq-mathcomp-solvable
    version: '{ (>= "1.11.0" & < "1.12~") }'
  description: |-
    [MathComp solvable 1.11](https://math-comp.github.io)
- opam:
    name: coq-mathcomp-field
    version: '{ (>= "1.11.0" & < "1.12~") }'
  description: |-
    [MathComp field 1.11](https://math-comp.github.io)
- opam:
    name: coq-mathcomp-real-closed
    version: '{ (= "1.1.1") }'
  description: |-
    [MathComp real closed 1.11.1](https://github.com/math-comp/real-closed)
namespace: mathcomp.abel

keywords:
- name: algebra
- name: galois
- name: unsolvability of quintincs


documentation: |-
  ## Organization of the code

  - `abel.v` itself contains the main theorems:
    + `galois_solvable_by_radical` (requires explicit roots of unity),
    + `ext_solvable_by_radical` (equivalent, and still requires roots of unity),
    + `radical_solvable_ext` (no mention of roots of unity),
    + `AbelGalois`, (equivalence obtained from the above to, requires  roots of unity)
    + and their consequence `example_not_solvable_by_radicals` (with one admit)

  - `xmathcomp/various.v` contains various (rather straightforward)
    extensions that should be added to various mathcomp packages asap
    with potential minor modifications,

  - `xmathcomp/char0.v` contains 0 characteristic specific results,
    that could use a refactoring for a smoother integration with
    mathcomp. e.g. ratr could get a canonical structure or rmorphism
    when the target field is a `lmodType ratr`, and we could provide a
    wrapper`NullCharType` akin to `PrimeCharType` (from `finfield.v`),

  - `xmathcomp/cyclotomic.v` contains complementary results about
    cyclotomic polynomials, (there is still one admit),

  - `xmathcomp/map_gal.v` contains complementary results about galois
    groups and galois extensions, including various isomorphisms,
    minimal galois extensions, solvable extensions, and mapping galois
    groups and galois extensions from a splitting field to
    another. This last construction is essential in switching to
    fields with roots of unity when we do not have them yet,

  - `xmathcomp/classic_ext.v` contains the theory of classic
    extensions by arbitrary polynomials, most of the results there are
    in the classically monad, making the results available either for
    a boolean goal or a classical goal. This was instrumental in
    eliminating references to some embarrassing roots of the unity.

  - `xmathcomp/diag.v` contains the theory of diagonalisation and
    codiagonalisation with the standard criterions.

  - `xmathcomp/mxgal.v` represents elements of a Galois group as
    matrices, this enables the use of `diag` to find eigenvectors and
    eigenvalues.

  - `xmathcomp/mxextra.v` is a correspondance between `'M_(_,_)` and `'Hom(_, _)`
     which is unused in the current development, we use `mxgal` instead.

  ## Development information

  [Developping with nix](NIX.md)
